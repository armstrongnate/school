// This part is the constructor/ "class block" / "declarations"

class Bag
{
public:
	Bag(int value); // constructor
	int GetValue() const;
	bool SetValue(int value);
protected:
	int m_value // data member
};

// END CONSTRUCTOR

// We write the code for the class separately

Bag::Bag(int value)
{
	this->m_value = value;
}

int Bag::GetValue() const
{
	return this->m_value
}

bool Bag::SetValue(int value)
{
	if(value > 10)
	  {
		return false;
	  }
	this->m_value = value;
	return true;
}

// END CODE FOR CLASS

Notes:
	uses keyword 'this' instead of self, uses '->' instead of '.'
	store data members within class block
	public and protected uses same as with Ruby. stuff is "private" by default.
	normal functions (non-constructors) still need to have their types declared.
	keyword 'const': means we don't mean to change anything by calling this method.
	look at point.cpp on examples for more on classes.
	
	initializing a class:
		Bag b(10);
		// this sets the variable b to the type "Bag". 
	
Point Operators (see point_operators.cpp in examples online)
	comparing class instances
		ex: 
			p < q
			bool operator<(const Point &rhs) const;
				//basically what's happening: p.operator<(q)
				'this' points to p because it's on the left
				'&rhs' is a reference to q. (stands for 'Right Hand Side')
				'this' is a pointer so use ->
				'&rhs' is a reference so use '.'
				first const protects p, second const protects q

			


	
	
	
