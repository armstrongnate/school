add:
	pushl 	%ebp
	movl 	%esp, %ebp
	movl 	12(%ebp), %eax
	addl	8(%ebp), %eax
	popl 	%ebp
	ret

- esp (Stack Pointer) is the line on top. Bring esp down to free up some memory, store your variables, run your function, then move esp back up.

- 'e' means 'extended' which means it's part of the 32 bit version (32 bit values).

- ebp: Base Pointer -> 

- pushl - pushes esp down, stores the value of ebp.

- popl - popping. opposite of pushing.

- movl - move. means copy. 

- esp moves up and down as functions are called and variables are stored but ebp doesn't move. it's the anchor of where the top of the stack was.

- whatever is sitting in the eax variable is what gets returned. eax is always returned.

- whenever you put a register name in parenthesis, treat it as an address and see where it's pointed to. Add the outside number to it.

- 8 above ebp is first parameter. 12 above ebp is second parameter.

8(%eax, %ebx, 4)
	- 8 + eax + ebx * 4
	- might be used to locate a variable inside a struct (in C terms)




