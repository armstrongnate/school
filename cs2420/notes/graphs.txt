** Definitions
* Subgraph:
* * sub-portion of a given graph. Contains some sub-set of vertices, some sub-set of the edges.
* Adjacent:
* * Two vertices are adjacent if i can get from to another with one edge.
* Path:
* * sequence of paths to get from one vertex to another
* Shortest path:
* * give me vertices to get from start to end in least number of hops
* Simple path:
* * a path that doesn't visit the same vertex twice
* Cycle:
* * any set of vertices that i can loop around and get back to the same one
* Simple cycle:
* * a cycle that doesn't visit the same vertex twice
* Connected:
* * connected if i can get from anywhere to anywhere
* Complete:
* * get anywhere from anywhere in 1 step
* Component:
* * set of vertices that are not connected

** Things you can not do in a graph
* Can't have multiple edges. Either i have one or i dont
* Edge must go between two different vertices

** Common examples of graphs
* Cities and roads between cities
* Buildings and sidewalks
* Airplane routes
* Networking (hubs, wires)
* Mazes
* Games

** Graph ADT (methods that a graph should have)
* init(vertex_count)
* findPath(x, y): returns path from x to y
* addEdge(x, y) adds edge
* getConnections(x)
* isEdge(x, y): "can i get from 0 to 3? can i get from 0 to 1?"
* example data structure:
  [[1,2], [0,2,3], [0,1,3], [1,3,4], [3]]
  reads as: 0 can go to 1 and 2. 1 can go to 0, 2, and 3. 2 can go to 0, 1, and 3. And so on.
* Which representation is better? Matrix or adjacency list?
